// p108

// 제약조건
// 정수 배열의 길이는 2 이상 10^5 이하
// 정수 배열의 각 데이터 값은 -100,000 이상 100,000 이하


`
 1) 상수 시간 복잡도 (O(1)) : 입력 크기에 관계없이 실행 시간이 일정한 알고리즘
    ex. 배열의 특정 인덱스에 접근하기

 2) 로그 시간 복잡도 (O(log n)): 입력 크기가 커질수록 실행 시간이 로그 함수적으로 증가하는 알고리즘
    ex. 이진 탐색

 3) 선형 시간 복잡도 (O(n)) : 입력 크기에 비례하여 실행 시간이 증가하는 알고리즘
    ex. 배열의 모든 요소를 순회하는 알고리즘

 4) 선형 로그 시간 복잡도 (O(n log n)):입력 크기 n에 대해 실행 시간이 n * log(n) 만큼 증가하는 알고리즘
    ex. 퀵 정렬, 병합 정렬

 5) 이차 시간 복잡도 (O(n^2)):입력 크기가 증가함에 따라 실행 시간이 제곱으로 증가하는 알고리즘
    ex. 단순 정렬 알고리즘 ( 버블 정렬, 삽입 정렬...)
    ->

 6) 세제곱 시간 복잡도 (O(n^3)): 입력 크기가 증가할수록 실행 시간이 세제곱으로 증가하는 알고리즘
    ex. 세 개의 중첩된 반복문을 사용하는 알고리즘

 7) 지수 시간 복잡도 (O(2^n)):입력 크기가 증가할수록 실행 시간이 지수적으로 증가하는 알고리즘
    ex. 피보나치 수열을 재귀적으로 계산하는 알고리즘

 8) 팩토리얼 시간 복잡도 (O(n!)): 입력 크기에 따라 실행 시간이 팩토리얼적으로 증가하는 알고리즘
    ex. 순열을 생성하는 알고리즘
`

arr = [1, 10, 5, 3, 100]
console.log("그냥 sort함수 : " , arr.sort());
// sort() --> 숫자가 아닌 문자열로 
// 3 vs 100
// -> 맨 앞 문자 3 > 1 아스키코드상 큼
//-> 100 3 의 순서로 오름차순 정렬(문자열 기준)

console.log("익명함수로 조건 전달한 sort함수 : " ,arr.sort((a,b)=> a-b));
// 




// 정답 코드
function solution(arr){
   arr.sort((a,b)=> a-b)
   return arr;
}

console.log("정답 함수 :", solution(arr));



// 자영풀이
// function bubble(arr){
//     console.log("함수 실행!", arr)


//     let n = arr.length
//     let temp = 0;
//     for (let i =0 ; i<n-1 ; i++){
//       for (let j = 0;j<i-1;j++){

//          if(arr[j] > arr[i]){
//             let temp = arr[i];
//             arr[i] = arr[i+1];
//             arr[i+1] = temp;
//          }
//       }

//     } 
//     console.log("알고리즘 후!", arr)
//     return arr;
// }


// function bubble(arr)